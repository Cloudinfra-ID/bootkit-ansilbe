---
- name: Copy Elasticsearch SSL certificate
  ansible.builtin.copy:
    src: "elasticsearch.crt"
    dest: "{{ elasticsearch_ssl_cert_file }}"
    owner: "{{ elasticsearch_user }}"
    group: "{{ elasticsearch_group }}"
    mode: 0640
  when: elasticsearch_ssl_enabled

- name: Copy Elasticsearch SSL key
  ansible.builtin.copy:
    src: "elasticsearch.key"
    dest: "{{ elasticsearch_ssl_key_file }}"
    owner: "{{ elasticsearch_user }}"
    group: "{{ elasticsearch_group }}"
    mode: 0600
  when: elasticsearch_ssl_enabled

- name: Copy Elasticsearch CA certificate
  ansible.builtin.copy:
    src: "elasticsearch-ca.crt"
    dest: "{{ elasticsearch_ssl_ca_file }}"
    owner: "{{ elasticsearch_user }}"
    group: "{{ elasticsearch_group }}"
    mode: 0644
  when: elasticsearch_ssl_enabled


- name: Copy Elasticsearch CA certificate to trusted CA (system-wide)
  ansible.builtin.copy:
    src: "elasticsearch-ca.crt"
    dest: "/usr/local/share/ca-certificates/elasticsearch-ca.crt"
    owner: root
    group: root
    mode: 0644
  when: elasticsearch_ssl_enabled

- name: Update Elasticearch trusted CA certificates
  ansible.builtin.command: update-ca-certificates
  register: update_ca_output
  changed_when: "'added new certificate' in update_ca_output.stdout"
  when: elasticsearch_ssl_enabled

# Use PKCS12
# ---
# - name: Generate Elasticsearch PKCS12 certificate instance configuration
#   ansible.builtin.template:
#     src: elasticsearch_ssl_instances.yml.j2
#     dest: "{{ elasticsearch_ssl_instance_config }}"
#     owner: "{{ elasticsearch_user }}"
#     group: "{{ elasticsearch_group }}"
#     mode: 0644

# - name: Generate Elasticsearch PKCS12 CA certificate
#   ansible.builtin.command:
#     cmd: "{{ elasticsearch_home_dir }}/bin/elasticsearch-certutil ca --pass {{ elasticsearch_ssl_ca_password }} --out {{ elasticsearch_ssl_ca_file }} --silent"
#   args:
#     creates: "{{ elasticsearch_ssl_ca_file}}"
#   when:
#     - elasticsearch_ssl_enabled
#     - inventory_hostname == groups['elasticsearch'][0] # Only run on the first master node in the cluster

# - name: Generate Elasticsearch PKCS12 server certificate
#   ansible.builtin.command:
#     cmd: "{{ elasticsearch_home_dir }}/bin/elasticsearch-certutil cert --ca {{ elasticsearch_ssl_ca_file }} --ca-pass {{ elasticsearch_ssl_ca_password }} --pass {{ elasticsearch_ssl_cert_password }} --out {{ elasticsearch_ssl_cert_file }} --in {{ elasticsearch_ssl_instance_config }} --silent"
#   args:
#     creates: "{{ elasticsearch_ssl_cert_file }}"
#   when:
#     - elasticsearch_ssl_enabled
#     - inventory_hostname == groups['elasticsearch'][0] # Only run on the first master node in the cluster

# - name: Fetch Elasticsearch PKCS12 CA certificate from first master node
#   ansible.builtin.fetch:
#     src: "{{ elasticsearch_ssl_ca_file }}"
#     dest: "/tmp/elastic-stack-ca.p12"
#     flat: yes
#   when:
#     - elasticsearch_ssl_enabled
#     - inventory_hostname == groups['elasticsearch'][0]

# - name: Fetch Elasticsearch PKCS12 server certificate from first master node
#   ansible.builtin.fetch:
#     src: "{{ elasticsearch_ssl_cert_file }}"
#     dest: "/tmp/elastic-certificates.p12"
#     flat: yes
#   when:
#     - elasticsearch_ssl_enabled
#     - inventory_hostname == groups['elasticsearch'][0]

# - name: Copy Elasticsearch PKCS12 CA certificate to other nodes
#   ansible.builtin.copy:
#     src: "/tmp/elastic-stack-ca.p12"
#     dest: "{{ elasticsearch_ssl_ca_file }}"
#     owner: "{{ elasticsearch_user }}"
#     group: "{{ elasticsearch_group }}"
#     mode: '0600'
#   when:
#     - elasticsearch_ssl_enabled
#     - inventory_hostname != groups['elasticsearch'][0]

# - name: Copy Elasticsearch PKCS12 server certificate to other nodes
#   ansible.builtin.copy:
#     src: "/tmp/elastic-certificates.p12"
#     dest: "{{ elasticsearch_ssl_cert_file }}"
#     owner: "{{ elasticsearch_user }}"
#     group: "{{ elasticsearch_group }}"
#     mode: '0600'
#   when:
#     - elasticsearch_ssl_enabled
#     - inventory_hostname != groups['elasticsearch'][0]

# - name: Re-create Elasticsearch keystore (force)
#   shell: |
#       rm -f {{ elasticsearch_keystore_path }}
#       yes | sudo -u {{ elasticsearch_user }} {{ elasticsearch_home_dir }}/bin/elasticsearch-keystore create
#   args:
#     creates: "{{ elasticsearch_keystore_path}}"
#   when: elasticsearch_ssl_enabled

# - name: Set keystore and truststore password in Elasticsearch configuration
#   shell: |
#     # echo {{ elasticsearch_ssl_cert_password }} | sudo -u {{ elasticsearch_user }} {{ elasticsearch_home_dir }}/bin/elasticsearch-keystore add --stdin --force -x xpack.security.http.ssl.keystore.secure_password
#     # echo {{ elasticsearch_ssl_cert_password }} | sudo -u {{ elasticsearch_user }} {{ elasticsearch_home_dir }}/bin/elasticsearch-keystore add --stdin --force -x xpack.security.http.ssl.truststore.secure_password
#     echo {{ elasticsearch_ssl_cert_password }} | sudo -u {{ elasticsearch_user }} {{ elasticsearch_home_dir }}/bin/elasticsearch-keystore add --stdin --force -x xpack.security.transport.ssl.keystore.secure_password
#     echo {{ elasticsearch_ssl_cert_password }} | sudo -u {{ elasticsearch_user }} {{ elasticsearch_home_dir }}/bin/elasticsearch-keystore add --stdin --force -x xpack.security.transport.ssl.truststore.secure_password
#   when: elasticsearch_ssl_enabled

# - name: Set Elasticsearch superuser password
#   ansible.builtin.command: echo {{ elasticsearch_superuser_password }} | {{ elasticsearch_home_dir }}/bin/elasticsearch-keystore add --stdin --force -x xpack.security.authc.password_hashing.algorithm

# - name: Set proper permissions on Elasticsearch config directories
#   ansible.builtin.file:
#     path: "{{ elasticsearch_ssl_dir }}"
#     state: directory
#     owner: "{{ elasticsearch_user }}"
#     group: "{{ elasticsearch_group }}"
#     recurse: yes
# ---